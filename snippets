# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#

'.source.js':
    'try catch':
        'prefix': 'try'
        'body': """
            try {
              const $1 = await $2;
            } catch (e) {

            }
            """

    'Console log':
        'prefix': 'log'
        'body': 'console.log($1);'

    'Console warn':
        'prefix': 'warn'
        'body': 'console.warn($1);'

    'Console error':
        'prefix': 'error'
        'body': 'console.error($1);'

    'Console info':
        'prefix': 'info'
        'body': 'console.info($1);'
#TEST
    'describe block':
        'prefix':'desc',
        'description': 'describe block',
        'body':"""
        describe('$1', ()=>{
          $2
        });
        """
    'it block':
        'prefix':'it',
        'description': 'it block',
        'body':"""
        it('$1', ()=>{
          $2
        });
        """
# REDUX
    'action request types':
        'prefix': 'reqt',
        'description': 'action request types',
        'body':"""
        $1_REQUEST: '$1_REQUEST',
        $1_SUCCESS: '$1_SUCCESS',
        $1_FAILURE: '$1_FAILURE'$2
        """
    'action type':
        'prefix': 'actt'
        'body': """
            $1: '$1'$2
            """
    'action':
        'prefix': 'act'
        'body': """
            export const $1 = ($2) =>({
                type:type.$3
            });
            """
    'async action thunk':
        'prefix': 'actasync'
        'body': """
            export const $1 = ($2) => async dispatch =>{
                $3
            };
            """
    'request actions':
        'prefix': 'reqact',
        'description': 'request actions',
        'body': """
            export const $1Request = () =>({
                type:type.$3_REQUEST,
                isFetching:true
            });
            export const $1Success = (payload) =>({
                type:type.$3_SUCCESS,
                isFetching:false,
                payload
            });
            export const $1Failure = (error) =>({
                type:type.$3_FAILURE,
                isFetching:false,
                error
            });
            """
    'action thunk':
        'prefix': 'actd'
        'body': """
            export const $1 = ($2) => dispatch =>({
                $3
            });
            """
    'React ES6 Component':
        'prefix': 'rcc'
        'body': """
        import React, { Component, PropTypes } from 'react';

        class $1 extends Component {
            render(){
                return (${2:<div>$1</div>});
            }
        }
        $1.propTypes = {

        };
        export default $1;
        """
    'React Functional Component':
        'prefix': 'frcc'
        'body': """
        import React, { PropTypes } from 'react';

        const $1 = (props) => {
            return (
              ${2:<div>$1</div>}
            );
        };
        $1.propTypes = {

        };
        export default $1;
        """
    'conntected React ES6 Component':
        'prefix': 'crcc'
        'body': """
            import React, { Component, PropTypes } from 'react';
            import { connect } from 'react-redux';
            import * as Actions from '../actions/index';

            class $1 extends Component {
                render(){
                    return (${2:<div>$1</div>});
                }
            }

            const mapStateToProps = (state) =>({
                state:state
            });

            export default connect(mapStateToProps, Actions)($1);
            """
    'componentWillMount':
        'prefix': 'cwm'
        'body': """
            componentWillMount(){
                $1
            }
            """
    'import':
        'prefix': 'imp'
        'body': """
            import $1 from '$2';
            """
    'this.state':
        'prefix': 'st'
        'body': """
            this.state.$1
            """
    'this.props':
        'prefix': 'pr'
        'body': """
            this.props.$1
            """
    'componentWillUnmount':
        'prefix': 'cwum'
        'body': """
            componentWillUnmount(){
                $1
            }
            """
    'componentDidMount':
        'prefix': 'cdm'
        'body': """
            componentDidMount(){
                $1
            }
            """
    'shouldComponentUpdate':
        'prefix': 'scu'
        'body': """
            shouldComponentUpdate(nextProps, nextState){
                $1
            }
            """
    'componentWillUpdate':
        'prefix': 'cwu'
        'body': """
            componentWillUpdate(nextProps, nextState){
                $1
            }
            """
    'componentDidUpdate':
        'prefix': 'cdu'
        'body': """
            componentDidUpdate(prevProps, prevState){
                $1
            }
            """
    'componentWillReceiveProps':
        'prefix': 'cwp'
        'body': """
            componentWillReceiveProps(nextProps){
                $1
            }
            """
    'this.setState':
        'prefix': 'sst'
        'body': """
            this.setState({ $1:$2 });
            """
    'react constructor':
        'prefix': 'rc'
        'body': """
            constructor(props){
                super(props);
            }
            """
    'react function':
            'prefix': 'fc'
            'body': """
                $1(){
                    $2
                }
                """
    'this.props.children':
            'prefix': 'child'
            'body': """
                this.props.children
                """
    'this.refs':
            'prefix': 'refs'
            'body': """
                this.refs.$1
                """
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
